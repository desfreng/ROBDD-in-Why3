(** OCaml ROBDD driver *)


module robdd.HashConsingHashtbl
  prelude "include Hashtbl.Make(struct \
  \n  open Robdd__BDDType \
  \n  type t = bdd \
  \n  let equal = eq1 \
  \n  let hash u = \
  \n    match u with \
  \n      | Top | Bottom -> id u \
  \n      | N (v, t, f, _) -> (Z.to_int v) + 8191 * (id t + 8191 * id f) \
  \nend) \n"

  syntax type      t        "Robdd__HashConsingHashtbl.t"
  syntax val       create   "Robdd__HashConsingHashtbl.create (Z.to_int %1)" prec 4 3 3
  syntax val       put      "Robdd__HashConsingHashtbl.replace %1 %2 %3" prec 4 3 3
  syntax exception NotFound "Not_found"
  syntax val       find     "Robdd__HashConsingHashtbl.find %1 %2" prec 4 3 3
  syntax val       mem      "Robdd__HashConsingHashtbl.mem %1 %2" prec 4 3 3
end


module robdd.BDDAssociationMap
  prelude "include Hashtbl.Make(struct \
  \n  open Robdd__BDDType \
  \n  type t = bdd \
  \n  let equal = eq0 \
  \n  let hash u = id u \
  \nend) \n"

  syntax type      t        "Robdd__BDDAssociationMap.t"
  syntax val       create   "Robdd__BDDAssociationMap.create (Z.to_int %1)" prec 4 3 3
  syntax val       put      "Robdd__BDDAssociationMap.replace %1 %2 %3" prec 4 3 3
  syntax exception NotFound "Not_found"
  syntax val       find     "Robdd__BDDAssociationMap.find %1 %2" prec 4 3 3
  syntax val       mem      "Robdd__BDDAssociationMap.mem %1 %2" prec 4 3 3
end


module robdd.BDDTupleAssociationMap
  prelude "include Hashtbl.Make(struct \
  \n  open Robdd__BDDType \
  \n  type t = bdd * bdd \
  \n  let equal = tuple_eq0 \
  \n  let hash (u, v) = id u + 8191 * id v\
  \nend) \n"

  syntax type      t        "Robdd__BDDTupleAssociationMap.t"
  syntax val       create   "Robdd__BDDTupleAssociationMap.create (Z.to_int %1)" prec 4 3 3
  syntax val       put      "Robdd__BDDTupleAssociationMap.replace %1 %2 %3" prec 4 3 3
  syntax exception NotFound "Not_found"
  syntax val       find     "Robdd__BDDTupleAssociationMap.find %1 %2" prec 4 3 3
  syntax val       mem      "Robdd__BDDTupleAssociationMap.mem %1 %2" prec 4 3 3
end
